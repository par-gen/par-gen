// @ts-nocheck

const EOF = "@par-gen.EOF";
const ERROR = "@par-gen.ERROR";

const tokenIds = [
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  7, // DASH
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  4, // QUANTIFIER
  4, // QUANTIFIER
  4, // QUANTIFIER
  2, // PAREN_OPEN
  3, // PAREN_CLOSE
  5, // BRACKET_OPEN
  6, // BRACKET_CLOSE
  1, // UNION
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  undefined, // undefined
  0, // CHARACTER
  undefined, // undefined
  8, // @par-gen.EOF
  9, // @par-gen.ERROR
];

const table = new Uint32Array(70144);
table.fill(69376);
table[68864] = 0; // CHARACTER
table[68865] = 256; // CHARACTER
table[68866] = 512; // CHARACTER
table[68867] = 768; // CHARACTER
table[68868] = 1024; // CHARACTER
table[68869] = 1280; // CHARACTER
table[68870] = 1536; // CHARACTER
table[68871] = 1792; // CHARACTER
table[68956] = 69120; // CHARACTER
table[68875] = 2048; // CHARACTER
table[68878] = 2304; // CHARACTER
table[68879] = 2560; // CHARACTER
table[68880] = 2816; // CHARACTER
table[68881] = 3072; // CHARACTER
table[68882] = 3328; // CHARACTER
table[68883] = 3584; // CHARACTER
table[68884] = 3840; // CHARACTER
table[68885] = 4096; // CHARACTER
table[68886] = 4352; // CHARACTER
table[68887] = 4608; // CHARACTER
table[68888] = 4864; // CHARACTER
table[68889] = 5120; // CHARACTER
table[68890] = 5376; // CHARACTER
table[68891] = 5632; // CHARACTER
table[68892] = 5888; // CHARACTER
table[68893] = 6144; // CHARACTER
table[68894] = 6400; // CHARACTER
table[68895] = 6656; // CHARACTER
table[68896] = 6912; // CHARACTER
table[68897] = 7168; // CHARACTER
table[68898] = 7424; // CHARACTER
table[68899] = 7680; // CHARACTER
table[68900] = 7936; // CHARACTER
table[68901] = 8192; // CHARACTER
table[68902] = 8448; // CHARACTER
table[68903] = 8704; // CHARACTER
table[68908] = 8960; // CHARACTER
table[68909] = 9216; // DASH
table[68910] = 9472; // CHARACTER
table[68911] = 9728; // CHARACTER
table[68912] = 9984; // CHARACTER
table[68913] = 10240; // CHARACTER
table[68914] = 10496; // CHARACTER
table[68915] = 10752; // CHARACTER
table[68916] = 11008; // CHARACTER
table[68917] = 11264; // CHARACTER
table[68918] = 11520; // CHARACTER
table[68919] = 11776; // CHARACTER
table[68920] = 12032; // CHARACTER
table[68921] = 12288; // CHARACTER
table[68922] = 12544; // CHARACTER
table[68923] = 12800; // CHARACTER
table[68924] = 13056; // CHARACTER
table[68925] = 13312; // CHARACTER
table[68926] = 13568; // CHARACTER
table[68928] = 13824; // CHARACTER
table[68929] = 14080; // CHARACTER
table[68930] = 14336; // CHARACTER
table[68931] = 14592; // CHARACTER
table[68932] = 14848; // CHARACTER
table[68933] = 15104; // CHARACTER
table[68934] = 15360; // CHARACTER
table[68935] = 15616; // CHARACTER
table[68936] = 15872; // CHARACTER
table[68937] = 16128; // CHARACTER
table[68938] = 16384; // CHARACTER
table[68939] = 16640; // CHARACTER
table[68940] = 16896; // CHARACTER
table[68941] = 17152; // CHARACTER
table[68942] = 17408; // CHARACTER
table[68943] = 17664; // CHARACTER
table[68944] = 17920; // CHARACTER
table[68945] = 18176; // CHARACTER
table[68946] = 18432; // CHARACTER
table[68947] = 18688; // CHARACTER
table[68948] = 18944; // CHARACTER
table[68949] = 19200; // CHARACTER
table[68950] = 19456; // CHARACTER
table[68951] = 19712; // CHARACTER
table[68952] = 19968; // CHARACTER
table[68953] = 20224; // CHARACTER
table[68954] = 20480; // CHARACTER
table[68958] = 20736; // CHARACTER
table[68959] = 20992; // CHARACTER
table[68960] = 21248; // CHARACTER
table[68961] = 21504; // CHARACTER
table[68962] = 21760; // CHARACTER
table[68963] = 22016; // CHARACTER
table[68964] = 22272; // CHARACTER
table[68965] = 22528; // CHARACTER
table[68966] = 22784; // CHARACTER
table[68967] = 23040; // CHARACTER
table[68968] = 23296; // CHARACTER
table[68969] = 23552; // CHARACTER
table[68970] = 23808; // CHARACTER
table[68971] = 24064; // CHARACTER
table[68972] = 24320; // CHARACTER
table[68973] = 24576; // CHARACTER
table[68974] = 24832; // CHARACTER
table[68975] = 25088; // CHARACTER
table[68976] = 25344; // CHARACTER
table[68977] = 25600; // CHARACTER
table[68978] = 25856; // CHARACTER
table[68979] = 26112; // CHARACTER
table[68980] = 26368; // CHARACTER
table[68981] = 26624; // CHARACTER
table[68982] = 26880; // CHARACTER
table[68983] = 27136; // CHARACTER
table[68984] = 27392; // CHARACTER
table[68985] = 27648; // CHARACTER
table[68986] = 27904; // CHARACTER
table[68987] = 28160; // CHARACTER
table[68989] = 28416; // CHARACTER
table[68990] = 28672; // CHARACTER
table[68991] = 28928; // CHARACTER
table[68992] = 29184; // CHARACTER
table[68993] = 29440; // CHARACTER
table[68994] = 29696; // CHARACTER
table[68995] = 29952; // CHARACTER
table[68996] = 30208; // CHARACTER
table[68997] = 30464; // CHARACTER
table[68998] = 30720; // CHARACTER
table[68999] = 30976; // CHARACTER
table[69000] = 31232; // CHARACTER
table[69001] = 31488; // CHARACTER
table[69002] = 31744; // CHARACTER
table[69003] = 32000; // CHARACTER
table[69004] = 32256; // CHARACTER
table[69005] = 32512; // CHARACTER
table[69006] = 32768; // CHARACTER
table[69007] = 33024; // CHARACTER
table[69008] = 33280; // CHARACTER
table[69009] = 33536; // CHARACTER
table[69010] = 33792; // CHARACTER
table[69011] = 34048; // CHARACTER
table[69012] = 34304; // CHARACTER
table[69013] = 34560; // CHARACTER
table[69014] = 34816; // CHARACTER
table[69015] = 35072; // CHARACTER
table[69016] = 35328; // CHARACTER
table[69017] = 35584; // CHARACTER
table[69018] = 35840; // CHARACTER
table[69019] = 36096; // CHARACTER
table[69020] = 36352; // CHARACTER
table[69021] = 36608; // CHARACTER
table[69022] = 36864; // CHARACTER
table[69023] = 37120; // CHARACTER
table[69024] = 37376; // CHARACTER
table[69025] = 37632; // CHARACTER
table[69026] = 37888; // CHARACTER
table[69027] = 38144; // CHARACTER
table[69028] = 38400; // CHARACTER
table[69029] = 38656; // CHARACTER
table[69030] = 38912; // CHARACTER
table[69031] = 39168; // CHARACTER
table[69032] = 39424; // CHARACTER
table[69033] = 39680; // CHARACTER
table[69034] = 39936; // CHARACTER
table[69035] = 40192; // CHARACTER
table[69036] = 40448; // CHARACTER
table[69037] = 40704; // CHARACTER
table[69038] = 40960; // CHARACTER
table[69039] = 41216; // CHARACTER
table[69040] = 41472; // CHARACTER
table[69041] = 41728; // CHARACTER
table[69042] = 41984; // CHARACTER
table[69043] = 42240; // CHARACTER
table[69044] = 42496; // CHARACTER
table[69045] = 42752; // CHARACTER
table[69046] = 43008; // CHARACTER
table[69047] = 43264; // CHARACTER
table[69048] = 43520; // CHARACTER
table[69049] = 43776; // CHARACTER
table[69050] = 44032; // CHARACTER
table[69051] = 44288; // CHARACTER
table[69052] = 44544; // CHARACTER
table[69053] = 44800; // CHARACTER
table[69054] = 45056; // CHARACTER
table[69055] = 45312; // CHARACTER
table[69056] = 45568; // CHARACTER
table[69057] = 45824; // CHARACTER
table[69058] = 46080; // CHARACTER
table[69059] = 46336; // CHARACTER
table[69060] = 46592; // CHARACTER
table[69061] = 46848; // CHARACTER
table[69062] = 47104; // CHARACTER
table[69063] = 47360; // CHARACTER
table[69064] = 47616; // CHARACTER
table[69065] = 47872; // CHARACTER
table[69066] = 48128; // CHARACTER
table[69067] = 48384; // CHARACTER
table[69068] = 48640; // CHARACTER
table[69069] = 48896; // CHARACTER
table[69070] = 49152; // CHARACTER
table[69071] = 49408; // CHARACTER
table[69072] = 49664; // CHARACTER
table[69073] = 49920; // CHARACTER
table[69074] = 50176; // CHARACTER
table[69075] = 50432; // CHARACTER
table[69076] = 50688; // CHARACTER
table[69077] = 50944; // CHARACTER
table[69078] = 51200; // CHARACTER
table[69079] = 51456; // CHARACTER
table[69080] = 51712; // CHARACTER
table[69081] = 51968; // CHARACTER
table[69082] = 52224; // CHARACTER
table[69083] = 52480; // CHARACTER
table[69084] = 52736; // CHARACTER
table[69085] = 52992; // CHARACTER
table[69086] = 53248; // CHARACTER
table[69087] = 53504; // CHARACTER
table[69088] = 53760; // CHARACTER
table[69089] = 54016; // CHARACTER
table[69090] = 54272; // CHARACTER
table[69091] = 54528; // CHARACTER
table[69092] = 54784; // CHARACTER
table[69093] = 55040; // CHARACTER
table[69094] = 55296; // CHARACTER
table[69095] = 55552; // CHARACTER
table[69096] = 55808; // CHARACTER
table[69097] = 56064; // CHARACTER
table[69098] = 56320; // CHARACTER
table[69099] = 56576; // CHARACTER
table[69100] = 56832; // CHARACTER
table[69101] = 57088; // CHARACTER
table[69102] = 57344; // CHARACTER
table[69103] = 57600; // CHARACTER
table[69104] = 57856; // CHARACTER
table[69105] = 58112; // CHARACTER
table[69106] = 58368; // CHARACTER
table[69107] = 58624; // CHARACTER
table[69108] = 58880; // CHARACTER
table[69109] = 59136; // CHARACTER
table[69110] = 59392; // CHARACTER
table[69111] = 59648; // CHARACTER
table[69112] = 59904; // CHARACTER
table[69113] = 60160; // CHARACTER
table[69114] = 60416; // CHARACTER
table[69115] = 60672; // CHARACTER
table[69116] = 60928; // CHARACTER
table[69117] = 61184; // CHARACTER
table[69118] = 61440; // CHARACTER
table[68906] = 61696; // QUANTIFIER
table[68907] = 61952; // QUANTIFIER
table[68927] = 62208; // QUANTIFIER
table[68904] = 62464; // PAREN_OPEN
table[68905] = 62720; // PAREN_CLOSE
table[68955] = 62976; // BRACKET_OPEN
table[68957] = 63232; // BRACKET_CLOSE
table[68988] = 63488; // UNION
table[69212] = 63744; // CHARACTER
table[69128] = 64000; // CHARACTER
table[69129] = 64256; // CHARACTER
table[69130] = 64512; // CHARACTER
table[69132] = 64768; // CHARACTER
table[69133] = 65024; // CHARACTER
table[69166] = 65280; // CHARACTER
table[69218] = 65536; // CHARACTER
table[69222] = 65792; // CHARACTER
table[69230] = 66048; // CHARACTER
table[69234] = 66304; // CHARACTER
table[69236] = 66560; // CHARACTER
table[69162] = 66816; // CHARACTER
table[69163] = 67072; // CHARACTER
table[69183] = 67328; // CHARACTER
table[69160] = 67584; // CHARACTER
table[69161] = 67840; // CHARACTER
table[69211] = 68096; // CHARACTER
table[69213] = 68352; // CHARACTER
table[69244] = 68608; // CHARACTER

// the currently matched lexeme
const lexeme = {
  state: -1,
  start: -1,
  end: -1,
};

const next = (input, offset) => {
  // 269
  let state = 68864;
  let successState = 69376;
  let successPos = 0;

  // try to find match
  let i = offset;
  const l = input.length;
  while (i < l) {
    state = table[state + input[i++]];
    if (state <= 68608) {
      successState = state;
      successPos = i;
    } else if (state === 69376) {
      break;
    }
  }

  if (successState !== 69376) {
    lexeme.state = tokenIds[successState / 256];
    lexeme.start = offset;
    lexeme.end = successPos;
    return lexeme;
  }
  lexeme.state = i === l ? 8 : 9;
  lexeme.start = -1;
  lexeme.end = -1;
  return lexeme;
};

export { EOF, ERROR, next };
