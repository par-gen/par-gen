// @ts-nocheck

const EOF = "@par-gen.EOF";
const ERROR = "@par-gen.ERROR";

const tokenIds = [
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  4, // QUANTIFIER
  4, // QUANTIFIER
  4, // QUANTIFIER
  2, // PAREN_OPEN
  3, // PAREN_CLOSE
  1, // UNION
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  0, // CHARACTER
  undefined, // undefined
  0, // CHARACTER
  undefined, // undefined
  5, // @par-gen.EOF
  6, // @par-gen.ERROR
];

const table = new Uint32Array(69632);
table.fill(68864);
table[68352] = 0; // CHARACTER
table[68353] = 256; // CHARACTER
table[68354] = 512; // CHARACTER
table[68355] = 768; // CHARACTER
table[68356] = 1024; // CHARACTER
table[68357] = 1280; // CHARACTER
table[68358] = 1536; // CHARACTER
table[68359] = 1792; // CHARACTER
table[68444] = 68608; // CHARACTER
table[68363] = 2048; // CHARACTER
table[68366] = 2304; // CHARACTER
table[68367] = 2560; // CHARACTER
table[68368] = 2816; // CHARACTER
table[68369] = 3072; // CHARACTER
table[68370] = 3328; // CHARACTER
table[68371] = 3584; // CHARACTER
table[68372] = 3840; // CHARACTER
table[68373] = 4096; // CHARACTER
table[68374] = 4352; // CHARACTER
table[68375] = 4608; // CHARACTER
table[68376] = 4864; // CHARACTER
table[68377] = 5120; // CHARACTER
table[68378] = 5376; // CHARACTER
table[68379] = 5632; // CHARACTER
table[68380] = 5888; // CHARACTER
table[68381] = 6144; // CHARACTER
table[68382] = 6400; // CHARACTER
table[68383] = 6656; // CHARACTER
table[68384] = 6912; // CHARACTER
table[68385] = 7168; // CHARACTER
table[68386] = 7424; // CHARACTER
table[68387] = 7680; // CHARACTER
table[68388] = 7936; // CHARACTER
table[68389] = 8192; // CHARACTER
table[68390] = 8448; // CHARACTER
table[68391] = 8704; // CHARACTER
table[68396] = 8960; // CHARACTER
table[68397] = 9216; // CHARACTER
table[68398] = 9472; // CHARACTER
table[68399] = 9728; // CHARACTER
table[68400] = 9984; // CHARACTER
table[68401] = 10240; // CHARACTER
table[68402] = 10496; // CHARACTER
table[68403] = 10752; // CHARACTER
table[68404] = 11008; // CHARACTER
table[68405] = 11264; // CHARACTER
table[68406] = 11520; // CHARACTER
table[68407] = 11776; // CHARACTER
table[68408] = 12032; // CHARACTER
table[68409] = 12288; // CHARACTER
table[68410] = 12544; // CHARACTER
table[68411] = 12800; // CHARACTER
table[68412] = 13056; // CHARACTER
table[68413] = 13312; // CHARACTER
table[68414] = 13568; // CHARACTER
table[68416] = 13824; // CHARACTER
table[68417] = 14080; // CHARACTER
table[68418] = 14336; // CHARACTER
table[68419] = 14592; // CHARACTER
table[68420] = 14848; // CHARACTER
table[68421] = 15104; // CHARACTER
table[68422] = 15360; // CHARACTER
table[68423] = 15616; // CHARACTER
table[68424] = 15872; // CHARACTER
table[68425] = 16128; // CHARACTER
table[68426] = 16384; // CHARACTER
table[68427] = 16640; // CHARACTER
table[68428] = 16896; // CHARACTER
table[68429] = 17152; // CHARACTER
table[68430] = 17408; // CHARACTER
table[68431] = 17664; // CHARACTER
table[68432] = 17920; // CHARACTER
table[68433] = 18176; // CHARACTER
table[68434] = 18432; // CHARACTER
table[68435] = 18688; // CHARACTER
table[68436] = 18944; // CHARACTER
table[68437] = 19200; // CHARACTER
table[68438] = 19456; // CHARACTER
table[68439] = 19712; // CHARACTER
table[68440] = 19968; // CHARACTER
table[68441] = 20224; // CHARACTER
table[68442] = 20480; // CHARACTER
table[68443] = 20736; // CHARACTER
table[68445] = 20992; // CHARACTER
table[68446] = 21248; // CHARACTER
table[68447] = 21504; // CHARACTER
table[68448] = 21760; // CHARACTER
table[68449] = 22016; // CHARACTER
table[68450] = 22272; // CHARACTER
table[68451] = 22528; // CHARACTER
table[68452] = 22784; // CHARACTER
table[68453] = 23040; // CHARACTER
table[68454] = 23296; // CHARACTER
table[68455] = 23552; // CHARACTER
table[68456] = 23808; // CHARACTER
table[68457] = 24064; // CHARACTER
table[68458] = 24320; // CHARACTER
table[68459] = 24576; // CHARACTER
table[68460] = 24832; // CHARACTER
table[68461] = 25088; // CHARACTER
table[68462] = 25344; // CHARACTER
table[68463] = 25600; // CHARACTER
table[68464] = 25856; // CHARACTER
table[68465] = 26112; // CHARACTER
table[68466] = 26368; // CHARACTER
table[68467] = 26624; // CHARACTER
table[68468] = 26880; // CHARACTER
table[68469] = 27136; // CHARACTER
table[68470] = 27392; // CHARACTER
table[68471] = 27648; // CHARACTER
table[68472] = 27904; // CHARACTER
table[68473] = 28160; // CHARACTER
table[68474] = 28416; // CHARACTER
table[68475] = 28672; // CHARACTER
table[68477] = 28928; // CHARACTER
table[68478] = 29184; // CHARACTER
table[68479] = 29440; // CHARACTER
table[68480] = 29696; // CHARACTER
table[68481] = 29952; // CHARACTER
table[68482] = 30208; // CHARACTER
table[68483] = 30464; // CHARACTER
table[68484] = 30720; // CHARACTER
table[68485] = 30976; // CHARACTER
table[68486] = 31232; // CHARACTER
table[68487] = 31488; // CHARACTER
table[68488] = 31744; // CHARACTER
table[68489] = 32000; // CHARACTER
table[68490] = 32256; // CHARACTER
table[68491] = 32512; // CHARACTER
table[68492] = 32768; // CHARACTER
table[68493] = 33024; // CHARACTER
table[68494] = 33280; // CHARACTER
table[68495] = 33536; // CHARACTER
table[68496] = 33792; // CHARACTER
table[68497] = 34048; // CHARACTER
table[68498] = 34304; // CHARACTER
table[68499] = 34560; // CHARACTER
table[68500] = 34816; // CHARACTER
table[68501] = 35072; // CHARACTER
table[68502] = 35328; // CHARACTER
table[68503] = 35584; // CHARACTER
table[68504] = 35840; // CHARACTER
table[68505] = 36096; // CHARACTER
table[68506] = 36352; // CHARACTER
table[68507] = 36608; // CHARACTER
table[68508] = 36864; // CHARACTER
table[68509] = 37120; // CHARACTER
table[68510] = 37376; // CHARACTER
table[68511] = 37632; // CHARACTER
table[68512] = 37888; // CHARACTER
table[68513] = 38144; // CHARACTER
table[68514] = 38400; // CHARACTER
table[68515] = 38656; // CHARACTER
table[68516] = 38912; // CHARACTER
table[68517] = 39168; // CHARACTER
table[68518] = 39424; // CHARACTER
table[68519] = 39680; // CHARACTER
table[68520] = 39936; // CHARACTER
table[68521] = 40192; // CHARACTER
table[68522] = 40448; // CHARACTER
table[68523] = 40704; // CHARACTER
table[68524] = 40960; // CHARACTER
table[68525] = 41216; // CHARACTER
table[68526] = 41472; // CHARACTER
table[68527] = 41728; // CHARACTER
table[68528] = 41984; // CHARACTER
table[68529] = 42240; // CHARACTER
table[68530] = 42496; // CHARACTER
table[68531] = 42752; // CHARACTER
table[68532] = 43008; // CHARACTER
table[68533] = 43264; // CHARACTER
table[68534] = 43520; // CHARACTER
table[68535] = 43776; // CHARACTER
table[68536] = 44032; // CHARACTER
table[68537] = 44288; // CHARACTER
table[68538] = 44544; // CHARACTER
table[68539] = 44800; // CHARACTER
table[68540] = 45056; // CHARACTER
table[68541] = 45312; // CHARACTER
table[68542] = 45568; // CHARACTER
table[68543] = 45824; // CHARACTER
table[68544] = 46080; // CHARACTER
table[68545] = 46336; // CHARACTER
table[68546] = 46592; // CHARACTER
table[68547] = 46848; // CHARACTER
table[68548] = 47104; // CHARACTER
table[68549] = 47360; // CHARACTER
table[68550] = 47616; // CHARACTER
table[68551] = 47872; // CHARACTER
table[68552] = 48128; // CHARACTER
table[68553] = 48384; // CHARACTER
table[68554] = 48640; // CHARACTER
table[68555] = 48896; // CHARACTER
table[68556] = 49152; // CHARACTER
table[68557] = 49408; // CHARACTER
table[68558] = 49664; // CHARACTER
table[68559] = 49920; // CHARACTER
table[68560] = 50176; // CHARACTER
table[68561] = 50432; // CHARACTER
table[68562] = 50688; // CHARACTER
table[68563] = 50944; // CHARACTER
table[68564] = 51200; // CHARACTER
table[68565] = 51456; // CHARACTER
table[68566] = 51712; // CHARACTER
table[68567] = 51968; // CHARACTER
table[68568] = 52224; // CHARACTER
table[68569] = 52480; // CHARACTER
table[68570] = 52736; // CHARACTER
table[68571] = 52992; // CHARACTER
table[68572] = 53248; // CHARACTER
table[68573] = 53504; // CHARACTER
table[68574] = 53760; // CHARACTER
table[68575] = 54016; // CHARACTER
table[68576] = 54272; // CHARACTER
table[68577] = 54528; // CHARACTER
table[68578] = 54784; // CHARACTER
table[68579] = 55040; // CHARACTER
table[68580] = 55296; // CHARACTER
table[68581] = 55552; // CHARACTER
table[68582] = 55808; // CHARACTER
table[68583] = 56064; // CHARACTER
table[68584] = 56320; // CHARACTER
table[68585] = 56576; // CHARACTER
table[68586] = 56832; // CHARACTER
table[68587] = 57088; // CHARACTER
table[68588] = 57344; // CHARACTER
table[68589] = 57600; // CHARACTER
table[68590] = 57856; // CHARACTER
table[68591] = 58112; // CHARACTER
table[68592] = 58368; // CHARACTER
table[68593] = 58624; // CHARACTER
table[68594] = 58880; // CHARACTER
table[68595] = 59136; // CHARACTER
table[68596] = 59392; // CHARACTER
table[68597] = 59648; // CHARACTER
table[68598] = 59904; // CHARACTER
table[68599] = 60160; // CHARACTER
table[68600] = 60416; // CHARACTER
table[68601] = 60672; // CHARACTER
table[68602] = 60928; // CHARACTER
table[68603] = 61184; // CHARACTER
table[68604] = 61440; // CHARACTER
table[68605] = 61696; // CHARACTER
table[68606] = 61952; // CHARACTER
table[68394] = 62208; // QUANTIFIER
table[68395] = 62464; // QUANTIFIER
table[68415] = 62720; // QUANTIFIER
table[68392] = 62976; // PAREN_OPEN
table[68393] = 63232; // PAREN_CLOSE
table[68476] = 63488; // UNION
table[68700] = 63744; // CHARACTER
table[68616] = 64000; // CHARACTER
table[68617] = 64256; // CHARACTER
table[68618] = 64512; // CHARACTER
table[68620] = 64768; // CHARACTER
table[68621] = 65024; // CHARACTER
table[68654] = 65280; // CHARACTER
table[68706] = 65536; // CHARACTER
table[68710] = 65792; // CHARACTER
table[68718] = 66048; // CHARACTER
table[68722] = 66304; // CHARACTER
table[68724] = 66560; // CHARACTER
table[68650] = 66816; // CHARACTER
table[68651] = 67072; // CHARACTER
table[68671] = 67328; // CHARACTER
table[68648] = 67584; // CHARACTER
table[68649] = 67840; // CHARACTER
table[68732] = 68096; // CHARACTER

// the currently matched lexeme
const lexeme = {
  state: -1,
  start: -1,
  end: -1,
};

const next = (input, offset) => {
  // 267
  let state = 68352;
  let successState = 68864;
  let successPos = 0;

  // try to find match
  let i = offset;
  const l = input.length;
  while (i < l) {
    state = table[state + input[i++]];
    if (state <= 68096) {
      successState = state;
      successPos = i;
    } else if (state === 68864) {
      break;
    }
  }

  if (successState !== 68864) {
    lexeme.state = tokenIds[successState / 256];
    lexeme.start = offset;
    lexeme.end = successPos;
    return lexeme;
  }
  lexeme.state = i === l ? 5 : 6;
  lexeme.start = -1;
  lexeme.end = -1;
  return lexeme;
};

export { EOF, ERROR, next };
