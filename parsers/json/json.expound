#######################################
#
# Initial Tokens
#
WS := '( |\n|\r|\t)( |\n|\r|\t)*';
TRUE := 'true';
FALSE := 'false';
NULL := 'null';
CURLY_OPEN := '{';
CURLY_CLOSE := '}';
COMMA := ',';
COLON := ':';
STRING := '"([^"\\]|\\["\\/bfnrt]|\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*"';
BRACKET_OPEN := '\[';
BRACKET_CLOSE := '\]';
ZERO := '0';
ONE_NINE := '[1-9]';
DOT := '\.';
UPPER_E := 'E';
LOWER_E := 'e';
PLUS := '+';
MINUS := '-';

# NUMBER: '-'? INT ('.' [0-9] +)? EXP?
# INT: '0' | [1-9] [0-9]*
# EXP: [Ee] [+\-]? INT
NUMBER := '(-|)(0|[1-9][0-9]*)(\.[0-9][0-9]*|)([Ee]([-+]|)(0|[1-9][0-9]*)|)';

#######################################
#
# Rules
#

Json := Element;

Element := WS? Value WS?;

Value := Object | Array | STRING | NUMBER | TRUE | FALSE | NULL;

Object := CURLY_OPEN WS? CURLY_CLOSE | CURLY_OPEN Members CURLY_CLOSE;

Members := Member | Members COMMA Member;

Member := WS? STRING WS? COLON Element;

Array := BRACKET_OPEN WS? BRACKET_CLOSE | BRACKET_OPEN Elements BRACKET_CLOSE;

Elements := Element | Elements COMMA Element;
